// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: glyphs.proto

#ifndef PROTOBUF_glyphs_2eproto__INCLUDED
#define PROTOBUF_glyphs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
namespace llmr {
namespace glyphs {
class fontstack;
class fontstackDefaultTypeInternal;
extern fontstackDefaultTypeInternal _fontstack_default_instance_;
class glyph;
class glyphDefaultTypeInternal;
extern glyphDefaultTypeInternal _glyph_default_instance_;
class glyphs;
class glyphsDefaultTypeInternal;
extern glyphsDefaultTypeInternal _glyphs_default_instance_;
}  // namespace glyphs
}  // namespace llmr

namespace llmr {
namespace glyphs {

namespace protobuf_glyphs_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_glyphs_2eproto

// ===================================================================

class glyph : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:llmr.glyphs.glyph) */ {
 public:
  glyph();
  virtual ~glyph();

  glyph(const glyph& from);

  inline glyph& operator=(const glyph& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const glyph& default_instance();

  static inline const glyph* internal_default_instance() {
    return reinterpret_cast<const glyph*>(
               &_glyph_default_instance_);
  }

  void Swap(glyph* other);

  // implements Message ----------------------------------------------

  inline glyph* New() const PROTOBUF_FINAL { return New(NULL); }

  glyph* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const glyph& from);
  void MergeFrom(const glyph& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(glyph* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes bitmap = 2;
  bool has_bitmap() const;
  void clear_bitmap();
  static const int kBitmapFieldNumber = 2;
  const ::std::string& bitmap() const;
  void set_bitmap(const ::std::string& value);
  #if LANG_CXX11
  void set_bitmap(::std::string&& value);
  #endif
  void set_bitmap(const char* value);
  void set_bitmap(const void* value, size_t size);
  ::std::string* mutable_bitmap();
  ::std::string* release_bitmap();
  void set_allocated_bitmap(::std::string* bitmap);

  // required uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // required uint32 width = 3;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // required uint32 height = 4;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // required sint32 left = 5;
  bool has_left() const;
  void clear_left();
  static const int kLeftFieldNumber = 5;
  ::google::protobuf::int32 left() const;
  void set_left(::google::protobuf::int32 value);

  // required sint32 top = 6;
  bool has_top() const;
  void clear_top();
  static const int kTopFieldNumber = 6;
  ::google::protobuf::int32 top() const;
  void set_top(::google::protobuf::int32 value);

  // required uint32 advance = 7;
  bool has_advance() const;
  void clear_advance();
  static const int kAdvanceFieldNumber = 7;
  ::google::protobuf::uint32 advance() const;
  void set_advance(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:llmr.glyphs.glyph)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_bitmap();
  void clear_has_bitmap();
  void set_has_width();
  void clear_has_width();
  void set_has_height();
  void clear_has_height();
  void set_has_left();
  void clear_has_left();
  void set_has_top();
  void clear_has_top();
  void set_has_advance();
  void clear_has_advance();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr bitmap_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::int32 left_;
  ::google::protobuf::int32 top_;
  ::google::protobuf::uint32 advance_;
  friend struct  protobuf_glyphs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class fontstack : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:llmr.glyphs.fontstack) */ {
 public:
  fontstack();
  virtual ~fontstack();

  fontstack(const fontstack& from);

  inline fontstack& operator=(const fontstack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const fontstack& default_instance();

  static inline const fontstack* internal_default_instance() {
    return reinterpret_cast<const fontstack*>(
               &_fontstack_default_instance_);
  }

  void Swap(fontstack* other);

  // implements Message ----------------------------------------------

  inline fontstack* New() const PROTOBUF_FINAL { return New(NULL); }

  fontstack* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const fontstack& from);
  void MergeFrom(const fontstack& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(fontstack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .llmr.glyphs.glyph glyphs = 3;
  int glyphs_size() const;
  void clear_glyphs();
  static const int kGlyphsFieldNumber = 3;
  const ::llmr::glyphs::glyph& glyphs(int index) const;
  ::llmr::glyphs::glyph* mutable_glyphs(int index);
  ::llmr::glyphs::glyph* add_glyphs();
  ::google::protobuf::RepeatedPtrField< ::llmr::glyphs::glyph >*
      mutable_glyphs();
  const ::google::protobuf::RepeatedPtrField< ::llmr::glyphs::glyph >&
      glyphs() const;

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string range = 2;
  bool has_range() const;
  void clear_range();
  static const int kRangeFieldNumber = 2;
  const ::std::string& range() const;
  void set_range(const ::std::string& value);
  #if LANG_CXX11
  void set_range(::std::string&& value);
  #endif
  void set_range(const char* value);
  void set_range(const char* value, size_t size);
  ::std::string* mutable_range();
  ::std::string* release_range();
  void set_allocated_range(::std::string* range);

  // @@protoc_insertion_point(class_scope:llmr.glyphs.fontstack)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_range();
  void clear_has_range();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::llmr::glyphs::glyph > glyphs_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr range_;
  friend struct  protobuf_glyphs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class glyphs : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:llmr.glyphs.glyphs) */ {
 public:
  glyphs();
  virtual ~glyphs();

  glyphs(const glyphs& from);

  inline glyphs& operator=(const glyphs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const glyphs& default_instance();

  static inline const glyphs* internal_default_instance() {
    return reinterpret_cast<const glyphs*>(
               &_glyphs_default_instance_);
  }

  void Swap(glyphs* other);

  // implements Message ----------------------------------------------

  inline glyphs* New() const PROTOBUF_FINAL { return New(NULL); }

  glyphs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const glyphs& from);
  void MergeFrom(const glyphs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(glyphs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .llmr.glyphs.fontstack stacks = 1;
  int stacks_size() const;
  void clear_stacks();
  static const int kStacksFieldNumber = 1;
  const ::llmr::glyphs::fontstack& stacks(int index) const;
  ::llmr::glyphs::fontstack* mutable_stacks(int index);
  ::llmr::glyphs::fontstack* add_stacks();
  ::google::protobuf::RepeatedPtrField< ::llmr::glyphs::fontstack >*
      mutable_stacks();
  const ::google::protobuf::RepeatedPtrField< ::llmr::glyphs::fontstack >&
      stacks() const;

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(glyphs)
  // @@protoc_insertion_point(class_scope:llmr.glyphs.glyphs)
 private:

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::llmr::glyphs::fontstack > stacks_;
  friend struct  protobuf_glyphs_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// glyph

// required uint32 id = 1;
inline bool glyph::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void glyph::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void glyph::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void glyph::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 glyph::id() const {
  // @@protoc_insertion_point(field_get:llmr.glyphs.glyph.id)
  return id_;
}
inline void glyph::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:llmr.glyphs.glyph.id)
}

// optional bytes bitmap = 2;
inline bool glyph::has_bitmap() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void glyph::set_has_bitmap() {
  _has_bits_[0] |= 0x00000001u;
}
inline void glyph::clear_has_bitmap() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void glyph::clear_bitmap() {
  bitmap_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bitmap();
}
inline const ::std::string& glyph::bitmap() const {
  // @@protoc_insertion_point(field_get:llmr.glyphs.glyph.bitmap)
  return bitmap_.GetNoArena();
}
inline void glyph::set_bitmap(const ::std::string& value) {
  set_has_bitmap();
  bitmap_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:llmr.glyphs.glyph.bitmap)
}
#if LANG_CXX11
inline void glyph::set_bitmap(::std::string&& value) {
  set_has_bitmap();
  bitmap_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:llmr.glyphs.glyph.bitmap)
}
#endif
inline void glyph::set_bitmap(const char* value) {
  set_has_bitmap();
  bitmap_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:llmr.glyphs.glyph.bitmap)
}
inline void glyph::set_bitmap(const void* value, size_t size) {
  set_has_bitmap();
  bitmap_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:llmr.glyphs.glyph.bitmap)
}
inline ::std::string* glyph::mutable_bitmap() {
  set_has_bitmap();
  // @@protoc_insertion_point(field_mutable:llmr.glyphs.glyph.bitmap)
  return bitmap_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* glyph::release_bitmap() {
  // @@protoc_insertion_point(field_release:llmr.glyphs.glyph.bitmap)
  clear_has_bitmap();
  return bitmap_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void glyph::set_allocated_bitmap(::std::string* bitmap) {
  if (bitmap != NULL) {
    set_has_bitmap();
  } else {
    clear_has_bitmap();
  }
  bitmap_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bitmap);
  // @@protoc_insertion_point(field_set_allocated:llmr.glyphs.glyph.bitmap)
}

// required uint32 width = 3;
inline bool glyph::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void glyph::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void glyph::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void glyph::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 glyph::width() const {
  // @@protoc_insertion_point(field_get:llmr.glyphs.glyph.width)
  return width_;
}
inline void glyph::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:llmr.glyphs.glyph.width)
}

// required uint32 height = 4;
inline bool glyph::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void glyph::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void glyph::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void glyph::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 glyph::height() const {
  // @@protoc_insertion_point(field_get:llmr.glyphs.glyph.height)
  return height_;
}
inline void glyph::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:llmr.glyphs.glyph.height)
}

// required sint32 left = 5;
inline bool glyph::has_left() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void glyph::set_has_left() {
  _has_bits_[0] |= 0x00000010u;
}
inline void glyph::clear_has_left() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void glyph::clear_left() {
  left_ = 0;
  clear_has_left();
}
inline ::google::protobuf::int32 glyph::left() const {
  // @@protoc_insertion_point(field_get:llmr.glyphs.glyph.left)
  return left_;
}
inline void glyph::set_left(::google::protobuf::int32 value) {
  set_has_left();
  left_ = value;
  // @@protoc_insertion_point(field_set:llmr.glyphs.glyph.left)
}

// required sint32 top = 6;
inline bool glyph::has_top() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void glyph::set_has_top() {
  _has_bits_[0] |= 0x00000020u;
}
inline void glyph::clear_has_top() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void glyph::clear_top() {
  top_ = 0;
  clear_has_top();
}
inline ::google::protobuf::int32 glyph::top() const {
  // @@protoc_insertion_point(field_get:llmr.glyphs.glyph.top)
  return top_;
}
inline void glyph::set_top(::google::protobuf::int32 value) {
  set_has_top();
  top_ = value;
  // @@protoc_insertion_point(field_set:llmr.glyphs.glyph.top)
}

// required uint32 advance = 7;
inline bool glyph::has_advance() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void glyph::set_has_advance() {
  _has_bits_[0] |= 0x00000040u;
}
inline void glyph::clear_has_advance() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void glyph::clear_advance() {
  advance_ = 0u;
  clear_has_advance();
}
inline ::google::protobuf::uint32 glyph::advance() const {
  // @@protoc_insertion_point(field_get:llmr.glyphs.glyph.advance)
  return advance_;
}
inline void glyph::set_advance(::google::protobuf::uint32 value) {
  set_has_advance();
  advance_ = value;
  // @@protoc_insertion_point(field_set:llmr.glyphs.glyph.advance)
}

// -------------------------------------------------------------------

// fontstack

// required string name = 1;
inline bool fontstack::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void fontstack::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void fontstack::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void fontstack::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& fontstack::name() const {
  // @@protoc_insertion_point(field_get:llmr.glyphs.fontstack.name)
  return name_.GetNoArena();
}
inline void fontstack::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:llmr.glyphs.fontstack.name)
}
#if LANG_CXX11
inline void fontstack::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:llmr.glyphs.fontstack.name)
}
#endif
inline void fontstack::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:llmr.glyphs.fontstack.name)
}
inline void fontstack::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:llmr.glyphs.fontstack.name)
}
inline ::std::string* fontstack::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:llmr.glyphs.fontstack.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* fontstack::release_name() {
  // @@protoc_insertion_point(field_release:llmr.glyphs.fontstack.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void fontstack::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:llmr.glyphs.fontstack.name)
}

// required string range = 2;
inline bool fontstack::has_range() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void fontstack::set_has_range() {
  _has_bits_[0] |= 0x00000002u;
}
inline void fontstack::clear_has_range() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void fontstack::clear_range() {
  range_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_range();
}
inline const ::std::string& fontstack::range() const {
  // @@protoc_insertion_point(field_get:llmr.glyphs.fontstack.range)
  return range_.GetNoArena();
}
inline void fontstack::set_range(const ::std::string& value) {
  set_has_range();
  range_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:llmr.glyphs.fontstack.range)
}
#if LANG_CXX11
inline void fontstack::set_range(::std::string&& value) {
  set_has_range();
  range_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:llmr.glyphs.fontstack.range)
}
#endif
inline void fontstack::set_range(const char* value) {
  set_has_range();
  range_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:llmr.glyphs.fontstack.range)
}
inline void fontstack::set_range(const char* value, size_t size) {
  set_has_range();
  range_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:llmr.glyphs.fontstack.range)
}
inline ::std::string* fontstack::mutable_range() {
  set_has_range();
  // @@protoc_insertion_point(field_mutable:llmr.glyphs.fontstack.range)
  return range_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* fontstack::release_range() {
  // @@protoc_insertion_point(field_release:llmr.glyphs.fontstack.range)
  clear_has_range();
  return range_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void fontstack::set_allocated_range(::std::string* range) {
  if (range != NULL) {
    set_has_range();
  } else {
    clear_has_range();
  }
  range_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), range);
  // @@protoc_insertion_point(field_set_allocated:llmr.glyphs.fontstack.range)
}

// repeated .llmr.glyphs.glyph glyphs = 3;
inline int fontstack::glyphs_size() const {
  return glyphs_.size();
}
inline void fontstack::clear_glyphs() {
  glyphs_.Clear();
}
inline const ::llmr::glyphs::glyph& fontstack::glyphs(int index) const {
  // @@protoc_insertion_point(field_get:llmr.glyphs.fontstack.glyphs)
  return glyphs_.Get(index);
}
inline ::llmr::glyphs::glyph* fontstack::mutable_glyphs(int index) {
  // @@protoc_insertion_point(field_mutable:llmr.glyphs.fontstack.glyphs)
  return glyphs_.Mutable(index);
}
inline ::llmr::glyphs::glyph* fontstack::add_glyphs() {
  // @@protoc_insertion_point(field_add:llmr.glyphs.fontstack.glyphs)
  return glyphs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::llmr::glyphs::glyph >*
fontstack::mutable_glyphs() {
  // @@protoc_insertion_point(field_mutable_list:llmr.glyphs.fontstack.glyphs)
  return &glyphs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::llmr::glyphs::glyph >&
fontstack::glyphs() const {
  // @@protoc_insertion_point(field_list:llmr.glyphs.fontstack.glyphs)
  return glyphs_;
}

// -------------------------------------------------------------------

// glyphs

// repeated .llmr.glyphs.fontstack stacks = 1;
inline int glyphs::stacks_size() const {
  return stacks_.size();
}
inline void glyphs::clear_stacks() {
  stacks_.Clear();
}
inline const ::llmr::glyphs::fontstack& glyphs::stacks(int index) const {
  // @@protoc_insertion_point(field_get:llmr.glyphs.glyphs.stacks)
  return stacks_.Get(index);
}
inline ::llmr::glyphs::fontstack* glyphs::mutable_stacks(int index) {
  // @@protoc_insertion_point(field_mutable:llmr.glyphs.glyphs.stacks)
  return stacks_.Mutable(index);
}
inline ::llmr::glyphs::fontstack* glyphs::add_stacks() {
  // @@protoc_insertion_point(field_add:llmr.glyphs.glyphs.stacks)
  return stacks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::llmr::glyphs::fontstack >*
glyphs::mutable_stacks() {
  // @@protoc_insertion_point(field_mutable_list:llmr.glyphs.glyphs.stacks)
  return &stacks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::llmr::glyphs::fontstack >&
glyphs::stacks() const {
  // @@protoc_insertion_point(field_list:llmr.glyphs.glyphs.stacks)
  return stacks_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace glyphs
}  // namespace llmr

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_glyphs_2eproto__INCLUDED
