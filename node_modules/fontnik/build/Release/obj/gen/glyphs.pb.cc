// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: glyphs.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "glyphs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace llmr {
namespace glyphs {
class glyphDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<glyph> {
} _glyph_default_instance_;
class fontstackDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<fontstack> {
} _fontstack_default_instance_;
class glyphsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<glyphs> {
} _glyphs_default_instance_;

namespace protobuf_glyphs_2eproto {


void TableStruct::Shutdown() {
  _glyph_default_instance_.Shutdown();
  _fontstack_default_instance_.Shutdown();
  _glyphs_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _glyph_default_instance_.DefaultConstruct();
  _fontstack_default_instance_.DefaultConstruct();
  _glyphs_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_glyphs_2eproto


// ===================================================================

static ::std::string* MutableUnknownFieldsForglyph(
    glyph* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int glyph::kIdFieldNumber;
const int glyph::kBitmapFieldNumber;
const int glyph::kWidthFieldNumber;
const int glyph::kHeightFieldNumber;
const int glyph::kLeftFieldNumber;
const int glyph::kTopFieldNumber;
const int glyph::kAdvanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

glyph::glyph()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_glyphs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:llmr.glyphs.glyph)
}
glyph::glyph(const glyph& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bitmap_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bitmap()) {
    bitmap_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bitmap_);
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&advance_) -
    reinterpret_cast<char*>(&id_) + sizeof(advance_));
  // @@protoc_insertion_point(copy_constructor:llmr.glyphs.glyph)
}

void glyph::SharedCtor() {
  _cached_size_ = 0;
  bitmap_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&advance_) -
    reinterpret_cast<char*>(&id_) + sizeof(advance_));
}

glyph::~glyph() {
  // @@protoc_insertion_point(destructor:llmr.glyphs.glyph)
  SharedDtor();
}

void glyph::SharedDtor() {
  bitmap_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void glyph::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const glyph& glyph::default_instance() {
  protobuf_glyphs_2eproto::InitDefaults();
  return *internal_default_instance();
}

glyph* glyph::New(::google::protobuf::Arena* arena) const {
  glyph* n = new glyph;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void glyph::Clear() {
// @@protoc_insertion_point(message_clear_start:llmr.glyphs.glyph)
  if (has_bitmap()) {
    GOOGLE_DCHECK(!bitmap_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*bitmap_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 126u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&advance_) -
      reinterpret_cast<char*>(&id_) + sizeof(advance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool glyph::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      NewPermanentCallback(
          &MutableUnknownFieldsForglyph, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:llmr.glyphs.glyph)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes bitmap = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bitmap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 width = 3;
      case 3: {
        if (tag == 24u) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 height = 4;
      case 4: {
        if (tag == 32u) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sint32 left = 5;
      case 5: {
        if (tag == 40u) {
          set_has_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sint32 top = 6;
      case 6: {
        if (tag == 48u) {
          set_has_top();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &top_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 advance = 7;
      case 7: {
        if (tag == 56u) {
          set_has_advance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &advance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:llmr.glyphs.glyph)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:llmr.glyphs.glyph)
  return false;
#undef DO_
}

void glyph::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:llmr.glyphs.glyph)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional bytes bitmap = 2;
  if (has_bitmap()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->bitmap(), output);
  }

  // required uint32 width = 3;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->width(), output);
  }

  // required uint32 height = 4;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->height(), output);
  }

  // required sint32 left = 5;
  if (has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->left(), output);
  }

  // required sint32 top = 6;
  if (has_top()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->top(), output);
  }

  // required uint32 advance = 7;
  if (has_advance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->advance(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:llmr.glyphs.glyph)
}

size_t glyph::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:llmr.glyphs.glyph)
  size_t total_size = 0;

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_width()) {
    // required uint32 width = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  if (has_height()) {
    // required uint32 height = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  if (has_left()) {
    // required sint32 left = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->left());
  }

  if (has_top()) {
    // required sint32 top = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->top());
  }

  if (has_advance()) {
    // required uint32 advance = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->advance());
  }

  return total_size;
}
size_t glyph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:llmr.glyphs.glyph)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x0000007e) ^ 0x0000007e) == 0) {  // All required fields are present.
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required uint32 width = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());

    // required uint32 height = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());

    // required sint32 left = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->left());

    // required sint32 top = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->top());

    // required uint32 advance = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->advance());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes bitmap = 2;
  if (has_bitmap()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->bitmap());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void glyph::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const glyph*>(&from));
}

void glyph::MergeFrom(const glyph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:llmr.glyphs.glyph)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 127u) {
    if (from.has_bitmap()) {
      set_has_bitmap();
      bitmap_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bitmap_);
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_left()) {
      set_left(from.left());
    }
    if (from.has_top()) {
      set_top(from.top());
    }
    if (from.has_advance()) {
      set_advance(from.advance());
    }
  }
}

void glyph::CopyFrom(const glyph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:llmr.glyphs.glyph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool glyph::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007e) != 0x0000007e) return false;
  return true;
}

void glyph::Swap(glyph* other) {
  if (other == this) return;
  InternalSwap(other);
}
void glyph::InternalSwap(glyph* other) {
  bitmap_.Swap(&other->bitmap_);
  std::swap(id_, other->id_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(left_, other->left_);
  std::swap(top_, other->top_);
  std::swap(advance_, other->advance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string glyph::GetTypeName() const {
  return "llmr.glyphs.glyph";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// glyph

// required uint32 id = 1;
bool glyph::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void glyph::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void glyph::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void glyph::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 glyph::id() const {
  // @@protoc_insertion_point(field_get:llmr.glyphs.glyph.id)
  return id_;
}
void glyph::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:llmr.glyphs.glyph.id)
}

// optional bytes bitmap = 2;
bool glyph::has_bitmap() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void glyph::set_has_bitmap() {
  _has_bits_[0] |= 0x00000001u;
}
void glyph::clear_has_bitmap() {
  _has_bits_[0] &= ~0x00000001u;
}
void glyph::clear_bitmap() {
  bitmap_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bitmap();
}
const ::std::string& glyph::bitmap() const {
  // @@protoc_insertion_point(field_get:llmr.glyphs.glyph.bitmap)
  return bitmap_.GetNoArena();
}
void glyph::set_bitmap(const ::std::string& value) {
  set_has_bitmap();
  bitmap_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:llmr.glyphs.glyph.bitmap)
}
#if LANG_CXX11
void glyph::set_bitmap(::std::string&& value) {
  set_has_bitmap();
  bitmap_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:llmr.glyphs.glyph.bitmap)
}
#endif
void glyph::set_bitmap(const char* value) {
  set_has_bitmap();
  bitmap_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:llmr.glyphs.glyph.bitmap)
}
void glyph::set_bitmap(const void* value, size_t size) {
  set_has_bitmap();
  bitmap_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:llmr.glyphs.glyph.bitmap)
}
::std::string* glyph::mutable_bitmap() {
  set_has_bitmap();
  // @@protoc_insertion_point(field_mutable:llmr.glyphs.glyph.bitmap)
  return bitmap_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* glyph::release_bitmap() {
  // @@protoc_insertion_point(field_release:llmr.glyphs.glyph.bitmap)
  clear_has_bitmap();
  return bitmap_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void glyph::set_allocated_bitmap(::std::string* bitmap) {
  if (bitmap != NULL) {
    set_has_bitmap();
  } else {
    clear_has_bitmap();
  }
  bitmap_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bitmap);
  // @@protoc_insertion_point(field_set_allocated:llmr.glyphs.glyph.bitmap)
}

// required uint32 width = 3;
bool glyph::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void glyph::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
void glyph::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
void glyph::clear_width() {
  width_ = 0u;
  clear_has_width();
}
::google::protobuf::uint32 glyph::width() const {
  // @@protoc_insertion_point(field_get:llmr.glyphs.glyph.width)
  return width_;
}
void glyph::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:llmr.glyphs.glyph.width)
}

// required uint32 height = 4;
bool glyph::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void glyph::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
void glyph::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
void glyph::clear_height() {
  height_ = 0u;
  clear_has_height();
}
::google::protobuf::uint32 glyph::height() const {
  // @@protoc_insertion_point(field_get:llmr.glyphs.glyph.height)
  return height_;
}
void glyph::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:llmr.glyphs.glyph.height)
}

// required sint32 left = 5;
bool glyph::has_left() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void glyph::set_has_left() {
  _has_bits_[0] |= 0x00000010u;
}
void glyph::clear_has_left() {
  _has_bits_[0] &= ~0x00000010u;
}
void glyph::clear_left() {
  left_ = 0;
  clear_has_left();
}
::google::protobuf::int32 glyph::left() const {
  // @@protoc_insertion_point(field_get:llmr.glyphs.glyph.left)
  return left_;
}
void glyph::set_left(::google::protobuf::int32 value) {
  set_has_left();
  left_ = value;
  // @@protoc_insertion_point(field_set:llmr.glyphs.glyph.left)
}

// required sint32 top = 6;
bool glyph::has_top() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void glyph::set_has_top() {
  _has_bits_[0] |= 0x00000020u;
}
void glyph::clear_has_top() {
  _has_bits_[0] &= ~0x00000020u;
}
void glyph::clear_top() {
  top_ = 0;
  clear_has_top();
}
::google::protobuf::int32 glyph::top() const {
  // @@protoc_insertion_point(field_get:llmr.glyphs.glyph.top)
  return top_;
}
void glyph::set_top(::google::protobuf::int32 value) {
  set_has_top();
  top_ = value;
  // @@protoc_insertion_point(field_set:llmr.glyphs.glyph.top)
}

// required uint32 advance = 7;
bool glyph::has_advance() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void glyph::set_has_advance() {
  _has_bits_[0] |= 0x00000040u;
}
void glyph::clear_has_advance() {
  _has_bits_[0] &= ~0x00000040u;
}
void glyph::clear_advance() {
  advance_ = 0u;
  clear_has_advance();
}
::google::protobuf::uint32 glyph::advance() const {
  // @@protoc_insertion_point(field_get:llmr.glyphs.glyph.advance)
  return advance_;
}
void glyph::set_advance(::google::protobuf::uint32 value) {
  set_has_advance();
  advance_ = value;
  // @@protoc_insertion_point(field_set:llmr.glyphs.glyph.advance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForfontstack(
    fontstack* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int fontstack::kNameFieldNumber;
const int fontstack::kRangeFieldNumber;
const int fontstack::kGlyphsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

fontstack::fontstack()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_glyphs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:llmr.glyphs.fontstack)
}
fontstack::fontstack(const fontstack& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      glyphs_(from.glyphs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  range_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_range()) {
    range_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.range_);
  }
  // @@protoc_insertion_point(copy_constructor:llmr.glyphs.fontstack)
}

void fontstack::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  range_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

fontstack::~fontstack() {
  // @@protoc_insertion_point(destructor:llmr.glyphs.fontstack)
  SharedDtor();
}

void fontstack::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  range_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void fontstack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fontstack& fontstack::default_instance() {
  protobuf_glyphs_2eproto::InitDefaults();
  return *internal_default_instance();
}

fontstack* fontstack::New(::google::protobuf::Arena* arena) const {
  fontstack* n = new fontstack;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void fontstack::Clear() {
// @@protoc_insertion_point(message_clear_start:llmr.glyphs.fontstack)
  glyphs_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_range()) {
      GOOGLE_DCHECK(!range_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*range_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool fontstack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      NewPermanentCallback(
          &MutableUnknownFieldsForfontstack, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:llmr.glyphs.fontstack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string range = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .llmr.glyphs.glyph glyphs = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_glyphs()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:llmr.glyphs.fontstack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:llmr.glyphs.fontstack)
  return false;
#undef DO_
}

void fontstack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:llmr.glyphs.fontstack)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string range = 2;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->range(), output);
  }

  // repeated .llmr.glyphs.glyph glyphs = 3;
  for (unsigned int i = 0, n = this->glyphs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->glyphs(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:llmr.glyphs.fontstack)
}

size_t fontstack::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:llmr.glyphs.fontstack)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_range()) {
    // required string range = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->range());
  }

  return total_size;
}
size_t fontstack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:llmr.glyphs.fontstack)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string range = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->range());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .llmr.glyphs.glyph glyphs = 3;
  {
    unsigned int count = this->glyphs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->glyphs(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fontstack::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const fontstack*>(&from));
}

void fontstack::MergeFrom(const fontstack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:llmr.glyphs.fontstack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  glyphs_.MergeFrom(from.glyphs_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_range()) {
      set_has_range();
      range_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.range_);
    }
  }
}

void fontstack::CopyFrom(const fontstack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:llmr.glyphs.fontstack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fontstack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->glyphs())) return false;
  return true;
}

void fontstack::Swap(fontstack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void fontstack::InternalSwap(fontstack* other) {
  glyphs_.UnsafeArenaSwap(&other->glyphs_);
  name_.Swap(&other->name_);
  range_.Swap(&other->range_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string fontstack::GetTypeName() const {
  return "llmr.glyphs.fontstack";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// fontstack

// required string name = 1;
bool fontstack::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void fontstack::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void fontstack::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void fontstack::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& fontstack::name() const {
  // @@protoc_insertion_point(field_get:llmr.glyphs.fontstack.name)
  return name_.GetNoArena();
}
void fontstack::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:llmr.glyphs.fontstack.name)
}
#if LANG_CXX11
void fontstack::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:llmr.glyphs.fontstack.name)
}
#endif
void fontstack::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:llmr.glyphs.fontstack.name)
}
void fontstack::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:llmr.glyphs.fontstack.name)
}
::std::string* fontstack::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:llmr.glyphs.fontstack.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* fontstack::release_name() {
  // @@protoc_insertion_point(field_release:llmr.glyphs.fontstack.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void fontstack::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:llmr.glyphs.fontstack.name)
}

// required string range = 2;
bool fontstack::has_range() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void fontstack::set_has_range() {
  _has_bits_[0] |= 0x00000002u;
}
void fontstack::clear_has_range() {
  _has_bits_[0] &= ~0x00000002u;
}
void fontstack::clear_range() {
  range_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_range();
}
const ::std::string& fontstack::range() const {
  // @@protoc_insertion_point(field_get:llmr.glyphs.fontstack.range)
  return range_.GetNoArena();
}
void fontstack::set_range(const ::std::string& value) {
  set_has_range();
  range_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:llmr.glyphs.fontstack.range)
}
#if LANG_CXX11
void fontstack::set_range(::std::string&& value) {
  set_has_range();
  range_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:llmr.glyphs.fontstack.range)
}
#endif
void fontstack::set_range(const char* value) {
  set_has_range();
  range_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:llmr.glyphs.fontstack.range)
}
void fontstack::set_range(const char* value, size_t size) {
  set_has_range();
  range_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:llmr.glyphs.fontstack.range)
}
::std::string* fontstack::mutable_range() {
  set_has_range();
  // @@protoc_insertion_point(field_mutable:llmr.glyphs.fontstack.range)
  return range_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* fontstack::release_range() {
  // @@protoc_insertion_point(field_release:llmr.glyphs.fontstack.range)
  clear_has_range();
  return range_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void fontstack::set_allocated_range(::std::string* range) {
  if (range != NULL) {
    set_has_range();
  } else {
    clear_has_range();
  }
  range_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), range);
  // @@protoc_insertion_point(field_set_allocated:llmr.glyphs.fontstack.range)
}

// repeated .llmr.glyphs.glyph glyphs = 3;
int fontstack::glyphs_size() const {
  return glyphs_.size();
}
void fontstack::clear_glyphs() {
  glyphs_.Clear();
}
const ::llmr::glyphs::glyph& fontstack::glyphs(int index) const {
  // @@protoc_insertion_point(field_get:llmr.glyphs.fontstack.glyphs)
  return glyphs_.Get(index);
}
::llmr::glyphs::glyph* fontstack::mutable_glyphs(int index) {
  // @@protoc_insertion_point(field_mutable:llmr.glyphs.fontstack.glyphs)
  return glyphs_.Mutable(index);
}
::llmr::glyphs::glyph* fontstack::add_glyphs() {
  // @@protoc_insertion_point(field_add:llmr.glyphs.fontstack.glyphs)
  return glyphs_.Add();
}
::google::protobuf::RepeatedPtrField< ::llmr::glyphs::glyph >*
fontstack::mutable_glyphs() {
  // @@protoc_insertion_point(field_mutable_list:llmr.glyphs.fontstack.glyphs)
  return &glyphs_;
}
const ::google::protobuf::RepeatedPtrField< ::llmr::glyphs::glyph >&
fontstack::glyphs() const {
  // @@protoc_insertion_point(field_list:llmr.glyphs.fontstack.glyphs)
  return glyphs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForglyphs(
    glyphs* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int glyphs::kStacksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

glyphs::glyphs()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_glyphs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:llmr.glyphs.glyphs)
}
glyphs::glyphs(const glyphs& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      stacks_(from.stacks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  // @@protoc_insertion_point(copy_constructor:llmr.glyphs.glyphs)
}

void glyphs::SharedCtor() {
  _cached_size_ = 0;
}

glyphs::~glyphs() {
  // @@protoc_insertion_point(destructor:llmr.glyphs.glyphs)
  SharedDtor();
}

void glyphs::SharedDtor() {
}

void glyphs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const glyphs& glyphs::default_instance() {
  protobuf_glyphs_2eproto::InitDefaults();
  return *internal_default_instance();
}

glyphs* glyphs::New(::google::protobuf::Arena* arena) const {
  glyphs* n = new glyphs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void glyphs::Clear() {
// @@protoc_insertion_point(message_clear_start:llmr.glyphs.glyphs)
  _extensions_.Clear();
  stacks_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool glyphs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      NewPermanentCallback(
          &MutableUnknownFieldsForglyphs, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:llmr.glyphs.glyphs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .llmr.glyphs.fontstack stacks = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stacks()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((128u <= tag && tag < 65536u)) {
          DO_(_extensions_.ParseField(tag, input, internal_default_instance(),
                                      &unknown_fields_stream));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:llmr.glyphs.glyphs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:llmr.glyphs.glyphs)
  return false;
#undef DO_
}

void glyphs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:llmr.glyphs.glyphs)
  // repeated .llmr.glyphs.fontstack stacks = 1;
  for (unsigned int i = 0, n = this->stacks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->stacks(i), output);
  }

  // Extension range [16, 8192)
  _extensions_.SerializeWithCachedSizes(
      16, 8192, output);

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:llmr.glyphs.glyphs)
}

size_t glyphs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:llmr.glyphs.glyphs)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  total_size += unknown_fields().size();

  // repeated .llmr.glyphs.fontstack stacks = 1;
  {
    unsigned int count = this->stacks_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stacks(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void glyphs::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const glyphs*>(&from));
}

void glyphs::MergeFrom(const glyphs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:llmr.glyphs.glyphs)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stacks_.MergeFrom(from.stacks_);
}

void glyphs::CopyFrom(const glyphs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:llmr.glyphs.glyphs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool glyphs::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (!::google::protobuf::internal::AllAreInitialized(this->stacks())) return false;
  return true;
}

void glyphs::Swap(glyphs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void glyphs::InternalSwap(glyphs* other) {
  stacks_.UnsafeArenaSwap(&other->stacks_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::std::string glyphs::GetTypeName() const {
  return "llmr.glyphs.glyphs";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// glyphs

// repeated .llmr.glyphs.fontstack stacks = 1;
int glyphs::stacks_size() const {
  return stacks_.size();
}
void glyphs::clear_stacks() {
  stacks_.Clear();
}
const ::llmr::glyphs::fontstack& glyphs::stacks(int index) const {
  // @@protoc_insertion_point(field_get:llmr.glyphs.glyphs.stacks)
  return stacks_.Get(index);
}
::llmr::glyphs::fontstack* glyphs::mutable_stacks(int index) {
  // @@protoc_insertion_point(field_mutable:llmr.glyphs.glyphs.stacks)
  return stacks_.Mutable(index);
}
::llmr::glyphs::fontstack* glyphs::add_stacks() {
  // @@protoc_insertion_point(field_add:llmr.glyphs.glyphs.stacks)
  return stacks_.Add();
}
::google::protobuf::RepeatedPtrField< ::llmr::glyphs::fontstack >*
glyphs::mutable_stacks() {
  // @@protoc_insertion_point(field_mutable_list:llmr.glyphs.glyphs.stacks)
  return &stacks_;
}
const ::google::protobuf::RepeatedPtrField< ::llmr::glyphs::fontstack >&
glyphs::stacks() const {
  // @@protoc_insertion_point(field_list:llmr.glyphs.glyphs.stacks)
  return stacks_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace glyphs
}  // namespace llmr

// @@protoc_insertion_point(global_scope)
